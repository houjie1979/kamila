<?php// If it's going to need the database, then it's // probably smart to require it before we start.require_once(LIB_PATH.DS.'database.php');class Authors extends DatabaseObject {		protected static $table_name="authors";	protected static $db_fields = array('id', 'ref_key', 'author_key', 					'medi_num', 'cauthor_flag', 'author_position');		public $id;	public $ref_key;	public $author_key;	public $medi_num;	public $cauthor_flag;	public $author_position;		public $author_name;	public $affiliation;	  public function code_name() {    if(isset($this->ref_key) && isset($this->author_key)) {      return $this->medi_num . " " . $this->ref_key . " " . $this->author_key. " " . 	  $this->author_position. " " . $this->cauthor_flag;    } else {      return "";    }  }  	public static function check_authors($medi){			$sql = "SELECT * FROM authors WHERE medi_num = '{$medi}' 					ORDER BY ref_key, author_position ";			$authors = self::find_by_sql($sql);			foreach($authors as $a) $a->add_definitions();			return $authors;	}		public function form_dupli_out(){		$out = $this->ref_key . chr(9) .  $this->author_key . chr(9) . $this->author_name . chr(9);		$out .=  $this->cauthor_flag . chr(9) . $this->affiliation. chr(10);		return $out;	}			public static function get_by_refkey($refkey){		$sql = "SELECT * FROM authors WHERE ref_key = '{$refkey}' ORDER BY author_position ";		$authors = self::find_by_sql($sql);		foreach($authors as $a) $a->add_definitions();		return $authors;	}		public function add_definitions(){		global $database;		$authorkey = $database->escape_value($this->author_key);		$sql = "SELECT initials, first_name, last_name, institution, department, city 				FROM name_address WHERE author_key = '".$authorkey."' ";     	$result_set = $database->query($sql);		$row = $database->fetch_array($result_set);		$this->author_name = $row['first_name']." ".$row['last_name']." (".$row['initials'].") ";		$this->affiliation = $row['institution']." ".$row['department']." (".$row['city'].") ";	}public static function authors_sql_where($refkey, $medi){						$sql = "";		if($refkey !="") {$sql .=" AND ref_key= '{$refkey}' "; }		if($medi !="") {$sql .=" AND medi_num='{$medi}' ";}		$sql .= " ORDER BY ref_key, author_position ";	return $sql;	}	public static function is_keyword($key) {	  global $database;	$sql = "SELECT COUNT(*) FROM keywords WHERE keyword_code = '{$key}'";	$result_set = $database->query($sql);	$row = $database->fetch_array($result_set);	return array_shift($row);	}		public static function pub_list($key,$year_start,$year_end) {	  global $database;	if($key !="") {	$sql = "SELECT GROUP_CONCAT(' ',n.initials, n.last_name ORDER BY a2.author_position), ";	$sql .=" r.article_title, j.title_abb, r.vol, r.issue, r.pages, b.title,  CONCAT('(',r.year,')')";	$sql .=" FROM authors a1 JOIN refs r ON r.ref_key = a1.ref_key ";	$sql .=" JOIN authors a2 ON r.ref_key = a2.ref_key ";	$sql .=" JOIN name_address n ON a2.author_key = n.author_key ";	$sql .=" LEFT JOIN journals j ON r.journal_code = j.journal_code ";	$sql .=" LEFT JOIN books b ON r.journal_code = b.book_code ";	$sql .=" WHERE a1.author_key='{$key}' ";	if($year_start != "") $sql .= " AND r.year >= '{$year_start}' ";	if($year_end != "") $sql .= " AND r.year <= '{$year_end}' ";	$sql .=" GROUP BY r.ref_key ORDER BY r.year ";	}	else $sql = NULL;	return $sql;	}	public static function authenticate($ref_key="", $author_key="") {    global $database;    $ref_key = $database->escape_value($ref_key);    $author_key = $database->escape_value($author_key);    $sql  = "SELECT * FROM authors ";    $sql .= "WHERE ref_key = '{$ref_key}' AND author_key = '{$author_key}' ";    $sql .= "LIMIT 1";    $result_array = self::find_by_sql($sql);	return !empty($result_array) ? array_shift($result_array) : false;	}	public static function author_ref_err() {		global $database;		$sql  = "SELECT DISTINCT(ref_key) FROM `authors` WHERE ref_key NOT IN (SELECT ref_key FROM refs) ";		$sql  .= " AND ref_key NOT IN (SELECT hold_key FROM holdings) ORDER BY ref_key";		$result_array = self::find_by_sql($sql);		return !empty($result_array) ? $result_array : false;	}public static function author_name_err() {		global $database;		$sql  = "SELECT * FROM `authors` WHERE author_key NOT IN (SELECT author_key FROM name_address)";		$result_array = self::find_by_sql($sql);		return !empty($result_array) ? $result_array : false;	}		}?>