<?php// If it's going to need the database, then it's // probably smart to require it before we start.require_once(LIB_PATH.DS.'database.php');class Holdings extends DatabaseObject {		protected static $table_name = "holdings";	protected static $db_fields = array('id', 'hold_key', 'type_code', 'journal_code', 				 'vol', 'issue', 'pages', 'year', 'article_title', 'lang_code',				 'fauthor_code', 'cauthor_code', 'chem_abs', 'asca_top', 'biosis',				 'inspec', 'phys', 'energy', 'scisearch', 'ldate', 'sdate', 'rdate', 				 'edate', 'abstractor', 'comments', 'intercomments', 'see_ref_key', 				 'flag_code', 'unsol_flag', 'cauthor_position', 'citations', 				 'abstract', 'indexterms');		public $id;	public $hold_key;	public $type_code;	public $journal_code;	public $vol;	public $issue;	public $pages;	public $year;	public $article_title;	public $lang_code;	public $fauthor_code;	public $cauthor_code;	public $chem_abs;	public $asca_top;	public $biosis;	public $inspec;	public $phys;	public $energy;	public $scisearch;	public $ldate;	public $sdate;	public $rdate;	public $edate;	public $abstractor;	public $comments;	public $intercomments;	public $see_ref_key;	public $flag_code;	public $unsol_flag;	public $cauthor_position;	public $abstract;	public $citations;	public $indexterms;		public $first_author_name;	public $corresponding_name;	public $journal_name;	public $writtenin;	public $ryear;	public $rcount;	public $hcount;			public function add_definitions(){		global $database;		$sql = "SELECT title_abb FROM journals WHERE journal_code = '".$this->journal_code. "' LIMIT 1";    	$result_set = $database->query($sql);		$row = $database->fetch_array($result_set);		$this->journal_name = $row['title_abb'];		$sql = "SELECT initials, first_name, last_name FROM name_address WHERE author_key = '{$this->fauthor_code}' ";     	$result_set = $database->query($sql);		$row = $database->fetch_array($result_set);		$this->first_author_name = $row['first_name']." ".$row['last_name']." (".$row['initials'].") ";		$sql = "SELECT initials, first_name, last_name FROM name_address WHERE author_key = '{$this->cauthor_code}' ";     	$result_set = $database->query($sql);		$row = $database->fetch_array($result_set);		$this->corresponding_name = $row['first_name']." ".$row['last_name']." (".$row['initials'].") ";	}	public static function get_new_holdkey($hold,$year){		global $database;		if(!empty($year)) $ye = substr($year,2,2); else $ye = "??";		$codebase = $ye.substr($hold,2,3);		$sql = "SELECT hold_key FROM holdings WHERE hold_key LIKE '{$codebase}%' ORDER BY hold_key DESC LIMIT 1 ";			$result_set = $database->query($sql);		if(mysql_num_rows($result_set) != 0) {			$result = $database->fetch_array($result_set);			$last_code = array_shift($result);			$last_number = (int) substr($last_code, 5, 1);			$next_number = (string) $last_number+1;			$next_code = $codebase.$next_number;		}		else $next_code = $codebase."1";		return $next_code;			}	public static function get_by_refkey($refkey){		$sql = "SELECT * FROM holdings WHERE hold_key = '{$refkey}' LIMIT 1 ";		return self::find_by_sql($sql);		}	public static function get_like_page($page){		$sql = "SELECT * FROM holdings WHERE pages = '{$page}' ORDER BY year DESC ";		return self::find_by_sql($sql);	}		public static function find_dupli_page($page){		$sql = "SELECT * FROM holdings WHERE pages = '{$page}' ORDER BY year DESC ";		return self::find_by_sql($sql);	}	public static function find_dupli_title($title){		$shorttitle = substr($title,0,50)."%";		$sql = "SELECT * FROM holdings WHERE article_title LIKE '{$shorttitle}' ORDER BY year DESC ";		return self::find_by_sql($sql);	}		public function record_exists(){	  	global $database;		$select_sql = "SELECT COUNT(*) FROM refs WHERE refcode = '{$this->refcode}'";		$result_set = $database->query($select_sql);		$rows = array_shift($database->fetch_array($result_set));		if(!empty($rows)) {	return true; } else return false;	}				  public function code_name() {    if(isset($this->hold_key)) {      return $this->hold_key . " " . $this->fauthor_code . " " . $this->journal_code . " " .	  		$this->vol . " " . $this->issue . " " . $this->pages . " " .			$this->year . " " . $this->article_title . " " . $this->lang_code ;    } else {      return "";    }  }  	public function form_dupli_out(){		$output = $this->hold_key.chr(9).$this->journal_code.chr(9).$this->vol.chr(9);		$output .= $this->issue.chr(9).$this->year.chr(9).$this->pages.chr(9);		$output .= $this->fauthor_code.chr(9).chr(9).$this->article_title.chr(10);		return $output;	}	  public static function ref_sql_where($refcode, $authors, $journal, $vol, 			$issue, $pages, $year, $title, $language, $keywords){				$spars=0;				$sql = "";		if($refcode !="") {$sql .=" AND hold_key= '{$refcode}' "; $spars++;}		if($authors !=""){			if($spars>0) $sql .=" AND LOCATE( '{$authors}', authors) ";			else $sql .=" LOCATE( '{$authors}', authors) ";			$spars++;		}		if($journal !=""){			if($spars>0) $sql .=" AND LOCATE( '{$journal}', journal) ";			else $sql .=" LOCATE( '{$journal}', journal) ";			$spars++;		}		if($vol !=""){			if($spars>0) $sql .=" AND vol= '{$vol}' ";			else $sql .=" vol= '{$vol}' ";			$spars++;		}		if($issue !=""){			if($spars>0) $sql .=" AND issue= '{$issue}' ";			else $sql .=" issue= '{$issue}' ";			$spars++;		}		if($pages !=""){			if($spars>0) $sql .=" AND LOCATE( '{$pages}', pages) ";			else $sql .=" LOCATE( '{$pages}', pages) ";			$spars++;		}		if($year !=""){			if($spars>0) $sql .=" AND year= '{$year}' ";			else $sql .=" year= '{$year}' ";			$spars++;		}		if($title !=""){			if($spars>0) $sql .=" AND LOCATE('{$title}',title) ";			else $sql .=" LOCATE('{$title}',title) ";			$spars++;		}		if($language !=""){			if($spars>0) $sql .=" AND lang= '{$language}' ";			else $sql .=" lang= '{$language}' ";			$spars++;		}		if($keywords !=""){			if($spars>0) $sql .=" AND keywords= '{$keywords}' ";			else $sql .=" LOCATE('{$keywords}', keywords) ";			$spars++;		}	return $sql;	}		public function count_holdings($syear,$eyaer){		$sql = "SELECT * FROM (SELECT h.year, COUNT(h.hold_key) AS hcount FROM holdings h WHERE 1 ";		if($syear != "") $sql .= " AND h.year >= " . $syear;		if($eyear != "") $sql .= " AND h.year <= " . $eyear;		$sql .= " GROUP BY h.year) g ";		$sql .= " RIGHT OUTER JOIN (SELECT r.year AS ryear, COUNT(r.ref_key) AS rcount FROM refs r WHERE 1 ";		if($syear != "") $sql .= " AND r.year >= " . $syear;		if($eyear != "") $sql .= " AND r.year <= " . $eyear;		$sql .= " GROUP BY r.year) f ON g.year = f.ryear ";		return self::find_by_sql($sql);					}	public static function authenticate($ref_key="") {    global $database;    $ref_key = $database->escape_value($ref_key);    $sql  = "SELECT * FROM holdings ";    $sql .= "WHERE hold_key = '{$ref_key}' ";    $sql .= "LIMIT 1";    $result_array = self::find_by_sql($sql);	return !empty($result_array) ? array_shift($result_array) : false;	}public static function journal_code_err(){	global $database;	$select_sql = "SELECT * FROM holdings WHERE journal_code NOT IN (SELECT journal_code FROM journals) ";	$select_sql .= " AND journal_code NOT IN (SELECT book_code FROM books) ";	$result_array = self::find_by_sql($select_sql);	return !empty($result_array) ? $result_array : false;		}public static function hold_err() {		global $database;		$sql  = "SELECT * FROM `holdings` WHERE (fauthor_code !='' AND fauthor_code NOT IN (SELECT author_key FROM name_address)) ";		$sql  .= " OR (cauthor_code !='' AND cauthor_code NOT IN (SELECT author_key FROM name_address)) ";		$sql  .= " OR (lang_code !='' AND lang_code NOT IN (SELECT lang_code FROM lang_code)) ";		$sql  .= " OR SUBSTR(hold_key,1,2) NOT BETWEEN '0' AND '99' ";		$sql  .= " OR SUBSTR(hold_key,3,1) NOT BETWEEN 'A' AND 'Z' ";		$sql  .= " OR SUBSTR(hold_key,4,1) NOT BETWEEN 'A' AND 'Z' ";		$sql  .= " OR SUBSTR(hold_key,5,1) NOT BETWEEN 'A' AND 'Z' ";		$sql  .= " OR SUBSTR(hold_key,6,1) NOT BETWEEN '0' AND '9' ";		$sql  .= " OR article_title = '' OR year = ''  OR pages = '' ORDER BY hold_key";		$result_array = self::find_by_sql($sql);		return !empty($result_array) ? $result_array : false;		}		}?>