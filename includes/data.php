<?php// If it's going to need the database, then it's // probably smart to require it before we start.require_once(LIB_PATH.DS.'database.php');class Data extends DatabaseObject {		protected static $table_name = "datas";	protected static $db_fields = array('id', 'ref_key', 'dat_key', 'medi_number',						 'isotope_code', 'source', 'source_temp', 'absorber', 						 'absorber_temp', 'isomer_shift', 'quad_split', 						 'comments', 'abstractor', 'prefix');		public $id;	public $ref_key;	public $dat_key;	public $medi_number;	public $isotope_code;	public $source;	public $source_temp;	public $absorber;	public $absorber_temp;	public $isomer_shift;	public $quad_split;	public $comments;	public $abstractor;	public $prefix;		public $isotope_name;	public $keyword_list;	public $subject;	public $topic_abb;	public $energy;	public $definition;	public $head;	public $last_name;	public $initials;	public $author_key;	public $keyword_code;	public $year;		public static function get_by_refkey($refkey,$datakey){		$sql = "SELECT * FROM datas WHERE ref_key = '{$refkey}' ";		if ($datakey != "") $sql .= " AND dat_key = '{$datakey}' ";		else $sql .= " ORDER BY dat_key ";		return self::find_by_sql($sql);	}			  public function code_name() {    if(isset($this->id) && isset($this->ref_key)) {	      return $this->ref_key . " " . $this->isotope_code . " " . $this->source . " " .	  		$this->absorber . " " . $this->source_temp . " " . $this->absorber_temp . " " .			$this->isomer_shift . " " . $this->quad_split . " " . htmlentities($this->comments);    } else {      return "";    }  }	public static function compose_isotope_list($medi){		$dat = self::compose_issue_isotope($medi);		$prevref = "";		foreach($dat as $record) $record->add_definitions();		$title = $dat[0]->isotope_name;		$out = $title.":,\"";		foreach($dat as $d) { 			if($title == $d->isotope_name) {				if($prevref != $d->ref_key) $out .= $d->ref_key.",";}			else { $title = $d->isotope_name; $out .= "\"".chr(10).$title.":,\"".$d->ref_key.","; }			$prevref = $d->ref_key;		}		$out .= "\"";		return $out;	}	public static function compose_hbisotope_list($kwd1, $kwd2){		$dat = self::compose_hb_isotope($kwd1, $kwd2);		$prevref = "";		foreach($dat as $record) $record->add_definitions();		$title = $dat[0]->isotope_name;		$out = $title.":,\"";		foreach($dat as $d) { 			if($title == $d->isotope_name) {				if($prevref != $d->ref_key) $out .= $d->ref_key.",";}			else { $title = $d->isotope_name; $out .= "\"".chr(10).$title.":,\"".$d->ref_key.","; }			$prevref = $d->ref_key;		}		$out .= "\"";		return $out;	}		public function form_dupli_out(){		self::add_definitions();		$output = $this->ref_key.chr(9).$this->isotope_code.chr(9).$this->source.chr(9);		$output .= $this->source_temp.chr(9).$this->absorber.chr(9).$this->absorber_temp.chr(9);		$output .= $this->isomer_shift.chr(9).$this->quad_split.chr(10);		$output .= chr(9).$this->comments.chr(10).chr(9).$this->keyword_list.chr(10);		return $output;	}  	public function compose_issue_data($medi){			$sql = "SELECT  d.*, c.definition FROM subject_code c 				JOIN				(SELECT a.*, b.keyword_code  					FROM keywords b  					JOIN  					(SELECT f.*, e.topic_abb, e.energy FROM datas f   						JOIN isotope_code e   						ON f.isotope_code = e.isotope_code  						WHERE medi_number = '{$medi}') a 					ON a.ref_key = b.ref_key AND a.dat_key = b.data_key 					ORDER BY a.ref_key, a.dat_key, b.keyword_code) d				ON c.subject_code = d.keyword_code				WHERE subject_flag = 'Y' 				ORDER BY d.isotope_code, c.definition, d.ref_key, d.dat_key";		return self::find_by_sql($sql);				}	public function compose_hb_data($kwd1, $kwd2){			$sql = "SELECT i.topic_abb, s.definition, dk.* FROM keywords k			JOIN (SELECT k1.ref_key AS ref, k1.data_key AS dat, r.year, d.* FROM keywords k1 ";		if($kwd2 != ''){ $sql .= "JOIN (SELECT * FROM keywords WHERE keyword_code = '{$kwd2}') k2				ON k1.ref_key=k2.ref_key AND k1.data_key=k2.data_key ";}		$sql .= " JOIN datas d ON k1.ref_key=d.ref_key AND k1.data_key=d.dat_key				JOIN refs r ON k1.ref_key = r.ref_key				WHERE k1.keyword_code = '{$kwd1}') dk				ON k.ref_key=dk.ref_key AND k.data_key=dk.dat			JOIN (SELECT subject_code, definition FROM subject_code WHERE subject_flag = 'Y') s 			ON k.keyword_code = s.subject_code			JOIN isotope_code i ON dk.isotope_code = i.isotope_code			ORDER BY i.topic_abb, s.definition, dk.year, k.ref_key, k.data_key ";		return self::find_by_sql($sql);				}	public function compose_export_issue_data($medi){			$sql = "SELECT d.*, GROUP_CONCAT(k.keyword_code ORDER BY k.keyword_code SEPARATOR ' ') AS keyword_code		FROM datas d JOIN keywords k ON d.ref_key = k.ref_key AND d.dat_key = k.data_key		WHERE medi_number = '{$medi}' GROUP BY CONCAT(d.ref_key,d.dat_key)		ORDER BY d.ref_key, d.dat_key ";		return self::find_by_sql($sql);				}			public function compose_author_index($medi){		if(strlen($medi) == 2) $medi .= "%%";		$sql = "SELECT n.author_key, n.last_name, n.initials, d.ref_key, d.keyword_code FROM name_address n			JOIN (SELECT a.author_key, a.ref_key, kr.keyword_code FROM authors a			      JOIN (SELECT DISTINCT(CONCAT(k.ref_key,k.keyword_code)) AS rk, r.ref_key, k.keyword_code FROM refs r				    JOIN keywords k                                    ON r.ref_key = k.ref_key				    WHERE r.medi_number LIKE '{$medi}'                                    AND (k.keyword_code IN (SELECT isotope_code FROM isotope_code) OR k.keyword_code IN ('THY','IST','GEN','PSL'))) kr                               ON kr.ref_key = a.ref_key ) d                                   ON d.author_key = n.author_key                           ORDER BY n.last_name, n.initials, n.author_key, d.keyword_code, d.ref_key ";		return self::find_by_sql($sql);		}	public function print_data_line($head){		if($head != "") $out = ",,,,,,,,H,".$head.chr(10);		else {			$out = $this->ref_key.",\"".$this->source."\",".$this->source_temp.",\"".$this->absorber;			$out .= "\",".$this->absorber_temp.",".$this->isomer_shift.",".$this->quad_split.",\"";			$out .= $this->comments."\",D,".chr(10);		}		return $out;	}		public function add_header(){		$this->head = $this->topic_abb." ".$this->energy." keV Transition";		if($this->isotope_code == "FE7" || $this->isotope_code == "SN9") {			$this->head .=": ".$this->definition; }	}		public function compose_issue_isotope($medi){		if(strlen($medi) == 2) $medi .= '%%';		$sql = "SELECT *  FROM datas d";		if($medi !="") { $sql .=" WHERE medi_number LIKE '{$medi}' ORDER BY isotope_code, ref_key ";			return self::find_by_sql($sql);		}		else return NULL;		}	public function compose_hb_isotope($kwd1, $kwd2){		$sql = "SELECT DISTINCT(CONCAT(k1.ref_key,i.topic_abb)), i.isotope_code, i.topic_abb, k1.ref_key, r.year, k1.id FROM keywords k1 ";		if($kwd2 !='') { $sql .=" JOIN (SELECT * FROM keywords WHERE keyword_code = '{$kwd2}') k2 ";				$sql .=" ON k1.ref_key=k2.ref_key AND k1.data_key=k2.data_key ";}		$sql .= " JOIN datas d ON k1.ref_key=d.ref_key AND k1.data_key=d.dat_key ";				$sql .= " JOIN refs r ON k1.ref_key = r.ref_key ";		$sql .= " JOIN isotope_code i ON d.isotope_code = i.isotope_code";		$sql .= " WHERE k1.keyword_code = '{$kwd1}'";		$sql .= " GROUP BY CONCAT(k1.ref_key, i.topic_abb) ";		$sql .= " ORDER BY i.topic_abb, r.year, k1.ref_key ";						return self::find_by_sql($sql);	}	public function data_search($refcode, $year){	// not used ?		$sql = "SELECT * FROM datas ";		if($refcode !="") $sql .=" WHERE refcode= '{$refcode}'";		return self::find_by_sql($sql);		}	public function add_definitions(){		global $database;		$subjects = array();		$keywordlist = "";		$sql = "SELECT subject_code, definition FROM subject_code WHERE subject_flag = 'Y' ";    	$result_set = $database->query($sql);		while($row = $database->fetch_array($result_set)) {			$code = $row['subject_code']; $subjects[$code] = $row['definition'];					}		$sql = "SELECT topic_abb, energy FROM isotope_code WHERE isotope_code = '".$this->isotope_code. "' LIMIT 1";    	$result_set = $database->query($sql);		$row = $database->fetch_array($result_set);		$this->isotope_name = $row['topic_abb'];		$this->topic_abb = $row['topic_abb'];		$this->energy = $row['energy'];		$sql = "SELECT keyword_code FROM keywords WHERE ref_key = '".$this->ref_key;		$sql .= "' AND data_key = '" . $this->dat_key . "' ORDER BY keyword_code ";		$result_set = $database->query($sql);		while($row = $database->fetch_array($result_set)) {			$this->keyword_list .= $row['keyword_code'] . " ";			if(array_key_exists($row['keyword_code'],$subjects)) {			$code = $row['keyword_code']; $this->definition = $subjects[$code];			}		}			}	public static function data_sql_where($refcode, $isocode, $source, $absorber, 			$stemp, $atemp, $ishift, $qsplit, $ecomments, $keywords){				$sql = "";		if($refcode !="") {$sql .=" AND ref_key= '{$refcode}' "; }		if($isocode !="") {$sql .=" AND isotope_codecode= '{$isocode}' "; }		if($source !="")  {$sql .=" AND  LOCATE('{$source}', source) ";	}		if($absorber !=""){$sql .=" AND LOCATE('{$absorber}', absorber) ";}		if($stemp !=""){			$nstemp =  array(250,350);			$nstemp = self::parse_pair($stemp);			$sql .=" AND stemp >= '{$nstemp[0]}' AND stemp <= '{$nstemp[1]}' ";		}		if($atemp !=""){			$natemp = self::parse_pair($atemp);			$sql .=" AND atemp >= '{$natemp[0]}' AND atemp <= '{$natemp[1]}' ";		}		if($ishift !=""){			$nishift = self::parse_pair($ishift);			$sql .=" AND ishift >= '{$nishift[0]}' AND ishift <= '{$nishift[1]}' ";		}		if($qsplit !=""){			$nqsplit = self::parse_pair($qsplit);			$sql .=" AND qsplit >= '{$nqsplit[0]}' AND qsplit <= '{$nqsplit[1]}' ";		}		if($ecomments !=""){			$sql .=" AND  LOCATE( '{$ecomments}', ecomments) ";					}		if($keywords !=""){			$keycodes = self::parse_keys($keywords);			foreach($keycodes as $keyword) $sql .=" AND LOCATE('{$keyword}', keywords) ";		}	return $sql;	}public function createdatarecord() {		global $database;		$query = "INSERT INTO datas            ( refcode, isocode, source, absorber, stemp, atemp, ishift, qsplit, ecomments, keywords)            VALUES ('{$this->refcode}',					'{$this->isocode}', 					'{$this->source}',					'{$this->absorber}',";		if($this->stemp == "") $query.= "NULL,"; 		else $query .= "'{$this->stemp}',";		if($this->atemp == "") $query .= "NULL,"; 		else $query .= "'{$this->atemp}',";		if($this->ishift == "") $query .= "NULL,";		else $query = $query . "'{$this->ishift}',";		if($this->qsplit == "") $query .= "NULL,";		 else $query .= "'{$this->qsplit}',";		$query .= " '{$this->ecomments} ', '{$this->keywords} ' )";	  	if($database->query($query)) {	    	$this->id = $database->insert_id();	   	 return true;	  	} else {	    	return false;	  	}	}	public static function data_by_isotope($year1, $year2){		$sql = " SELECT i.topic_abb, COUNT(d.ref_key) FROM datas d ";		$sql .= " JOIN isotope_code i ON i.isotope_code = d.isotope_code ";		$sql .= " JOIN refs r ON r.ref_key = d.ref_key WHERE 1 ";		if($year1 !="") {$sql .=" AND r.year>= '{$year1}' ";}		if($year2 !="") {$sql .=" AND r.year<= '{$year2}' ";}		$sql .= " GROUP BY i.topic_abb ORDER BY COUNT(d.ref_key) DESC ";		return $sql;	}public static function pub_by_isotope($year1, $year2){		$sql = " SELECT i.topic_abb, COUNT(DISTINCT d.ref_key) FROM datas d ";		$sql .= " JOIN isotope_code i ON i.isotope_code = d.isotope_code ";		$sql .= " JOIN refs r ON r.ref_key = d.ref_key WHERE 1 ";		if($year1 !="") {$sql .=" AND r.year>= '{$year1}' ";}		if($year2 !="") {$sql .=" AND r.year<= '{$year2}' ";}		$sql .= " GROUP BY i.topic_abb ORDER BY COUNT(DISTINCT d.ref_key) DESC ";		return $sql;	}public static function data_by_subject($year1, $year2){		$sql = " SELECT s.definition, COUNT(d.ref_key) AS datacount FROM datas d ";		$sql .= " JOIN keywords k ON d.ref_key = k.ref_key ";		$sql .= " JOIN refs r ON r.ref_key = d.ref_key ";		$sql .= " JOIN subject_code s ON k.keyword_code = s.subject_code WHERE 1 ";		if($year1 !="") {$sql .=" AND r.year>= '{$year1}' ";}		if($year2 !="") {$sql .=" AND r.year<= '{$year2}' ";}		$sql .= " AND d.dat_key = k.data_key ";		$sql .= " GROUP BY s.subject_code ORDER BY datacount DESC ";		return $sql;	}public static function pub_by_subject($year1, $year2){		$sql = " SELECT s.definition, COUNT(DISTINCT d.ref_key) AS refcount FROM datas d ";		$sql .= " JOIN keywords k ON d.ref_key = k.ref_key ";		$sql .= " JOIN refs r ON r.ref_key = d.ref_key ";		$sql .= " JOIN subject_code s ON k.keyword_code = s.subject_code WHERE 1 ";		if($year1 !="") {$sql .=" AND r.year>= '{$year1}' ";}		if($year2 !="") {$sql .=" AND r.year<= '{$year2}' ";}		$sql .= " AND d.dat_key = k.data_key ";		$sql .= " GROUP BY s.subject_code ORDER BY refcount DESC ";		return $sql;	}	public static function authenticate($ref_key="", $dat_key="") {    global $database;    $ref_key = $database->escape_value($ref_key);    $dat_key = $database->escape_value($dat_key);    $sql  = "SELECT * FROM datas ";    $sql .= "WHERE ref_key = '{$ref_key}' AND dat_key = '{$dat_key}' ";    $sql .= "LIMIT 1";    $result_array = self::find_by_sql($sql);	return !empty($result_array) ? array_shift($result_array) : false;	}	public static function data_err() {		global $database;		$sql  = "SELECT * FROM datas WHERE SUBSTR(ref_key,1,2) NOT BETWEEN '0' AND '99'";		$sql  .= " OR SUBSTR(ref_key,3,1) NOT BETWEEN 'A' AND 'Z' ";		$sql  .= " OR SUBSTR(ref_key,4,3) NOT BETWEEN '0' AND '999' ";		$sql  .= " OR isotope_code NOT IN (SELECT isotope_code FROM isotope_code) ";		$sql  .= " OR dat_key = '' OR source = '' OR absorber = '' ORDER BY ref_key, dat_key";		$result_array = self::find_by_sql($sql);		return !empty($result_array) ? $result_array : false;		}public static function data_by_keyword($k1, $k2, $k3, $k4){	if($k1 == NULL) { $k1 = $k2; $k2 = $k3; $k3 = $k4; $k4 = NULL; }	else{ if($k2 == NULL) { $k2 = $k3; $k3 = $k4; $k4 = NULL;}		else{if($k3 == NULL){$k3 = $k4; $k4 = NULL;}		}				}	if($k1 == NULL) { $k1 = $k2; $k2 = $k3; $k3 = $k4; $k4 = NULL; }	if($k1 == NULL) { $k1 = $k2; $k2 = $k3; $k3 = $k4; $k4 = NULL; }		$sql = "SELECT d.ref_key, d.dat_key, d.source, d.source_temp, d.absorber, d.absorber_temp, d.isomer_shift, d.quad_split, r.year ";	$sql .= "  FROM datas d JOIN refs r ON d.ref_key=r.ref_key ";	if($k1 != NULL) {		$sql .= " JOIN (SELECT k1.ref_key, k1.data_key  FROM keywords k1 ";		if($k2 != NULL){			$sql .= " JOIN (SELECT ref_key, data_key FROM keywords  WHERE keyword_code = '{$k2}') AS k2 ";			$sql .= " ON k1.ref_key = k2.ref_key AND k1.data_key = k2.data_key ";			if($k3 != NULL){				$sql .= " JOIN (SELECT ref_key, data_key FROM keywords  WHERE keyword_code = '{$k3}') AS k3 ";				$sql .= " ON k1.ref_key = k3.ref_key AND k1.data_key = k3.data_key ";				if($k4 != NULL){					$sql .= " JOIN (SELECT ref_key, data_key FROM keywords  WHERE keyword_code = '{$k4}') AS k4 ";					$sql .= " ON k1.ref_key = k4.ref_key AND k1.data_key = k4.data_key ";				}			}		}		$sql .= " WHERE k1.keyword_code = '{$k1}') AS k ";			$sql .= " ON d.ref_key = k.ref_key AND d.dat_key = k.data_key ";	}	$sql .= " ORDER BY r.year, d.ref_key, d.dat_key";	return $sql;	}public static function data_by_comments($k1, $k2, $k3){	if($k1 != NULL) $k1 = '%'.$k1.'%';	if($k2 != NULL) $k2 = '%'.$k2.'%';		if($k3 != NULL) $k3 = '%'.$k3.'%';		$sql = "SELECT d.ref_key, d.dat_key, d.source, d.source_temp, d.absorber, d.absorber_temp, d.isomer_shift, d.quad_split, d.comments, r.year ";	$sql .= "  FROM datas d JOIN refs r ON d.ref_key=r.ref_key WHERE 1 ";	if($k1 != NULL)  $sql .= " AND d.comments LIKE '{$k1}' ";	if($k2 != NULL)  $sql .= " AND d.comments LIKE '{$k2}' ";		if($k3 != NULL)  $sql .= " AND d.comments LIKE '{$k3}' ";		$sql .= " ORDER BY r.year, d.ref_key, d.dat_key";	return $sql;	}public static function data_by_absorber($isot, $source, $absorber){	if($source != NULL) $source = '%'.$source.'%';	if($absorber != NULL) $absorber = '%'.$absorber.'%';			$sql = "SELECT d.ref_key, d.dat_key, d.source, d.source_temp, d.absorber, d.absorber_temp, d.isomer_shift, d.quad_split, d.comments, r.year ";	$sql .= "  FROM datas d JOIN refs r ON d.ref_key=r.ref_key WHERE 1 ";	if($isot != NULL)  $sql .= " AND d.isotope_code = '{$isot}' ";	if($source  != NULL)  $sql .= " AND d.source LIKE '{$source}' ";		if($absorber  != NULL)  $sql .= " AND d.absorber  LIKE '{$absorber}' ";		$sql .= " ORDER BY r.year, d.ref_key, d.dat_key";	return $sql;	}public static function data_by_value($iso, $minis, $maxis, $minqs, $maxqs){		$sql = "SELECT d.ref_key, d.dat_key, d.source, d.source_temp, d.absorber, d.absorber_temp, ";	$sql .= "d.isomer_shift, d.quad_split, d.comments   FROM datas d ";	if($iso != NULL) $sql .= " WHERE d.isotope_code = '{$iso}'  ";		if($minis != NULL) $sql .= " AND d.isomer_shift >= {$minis}  ";		if($maxis != NULL) $sql .= " AND d.isomer_shift <= {$maxis}  ";		if($minqs != NULL) $sql .= " AND d.quad_split >= {$minqs}  ";		if($maxqs != NULL) $sql .= " AND d.quad_split <= {$maxqs}  ";		if($minis != NULL) $sql .= " ORDER BY d.isomer_shift, d.quad_split";	else $sql .= " ORDER BY  d.quad_split, d.isomer_shift";	return $sql;	}}?>