<?php// If it's going to need the database, then it's // probably smart to require it before we start.require_once(LIB_PATH.DS.'database.php');class Translations extends DatabaseObject {		protected static $table_name="translations";	protected static $db_fields = array('id', 'ref_key', 'vol', 'issue', 					'pages', 'year', 'journal_code');		public $id;	public $ref_key;	public $vol;	public $issue;	public $pages;	public $year;	public $journal_code;	  public function code_name() {    if(isset($this->ref_key) ) {      return $this->issue . "   " .$this->ref_key . "   " . $this->journal_code. "   " . 	  $this->vol. "   " . $this->pages. "   " . $this->year;    } else {      return "";    }  }public static function trans_sql_where($ref_key, $issue){						$sql = "";		if($ref_key !="") {$sql .=" AND ref_key= '{$ref_key}' "; }		if($issue !="") {$sql .=" AND issue ='{$issue}' ";}		$sql .= " ORDER BY ref_key ";	return $sql;	}	public static function is_keyword($key) {	  global $database;	$sql = "SELECT COUNT(*) FROM keywords WHERE keyword_code = '{$key}'";	$result_set = $database->query($sql);	$row = $database->fetch_array($result_set);	echo $key." ".array_shift($row);	return array_shift($row);	}	public static function authenticate($ref_key="") {    global $database;    $ref_key = $database->escape_value($ref_key);    $sql  = "SELECT * FROM translations ";    $sql .= "WHERE ref_key = '{$ref_key}' ";    $sql .= "LIMIT 1";    $result_array = self::find_by_sql($sql);	return !empty($result_array) ? array_shift($result_array) : false;	}public static function translation_err() {		global $database;		$sql  = "SELECT * FROM `translations` WHERE ref_key NOT IN (SELECT ref_key FROM refs) ";		$sql  .= " OR journal_code NOT IN (SELECT journal_code FROM journals) ";		$result_array = self::find_by_sql($sql);		return !empty($result_array) ? $result_array : false;	}	}?>