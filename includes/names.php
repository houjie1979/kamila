<?php// If it's going to need the database, then it's // probably smart to require it before we start.require_once(LIB_PATH.DS.'database.php');class Names extends DatabaseObject {		protected static $table_name="name_address";	protected static $db_fields = array('id', 'author_key', 'title',					'first_name', 'last_name', 'department', 'institution', 					'street', 'city', 'state_code', 'zip', 'country_code', 					'initials', 'phone', 'fax', 'email', 'emp_by_code', 					'medi_number', 'rank_abb', 'verification');		public $id;	public $author_key;	public $title;	public $first_name;	public $last_name;	public $department;	public $institution;	public $street;	public $city;	public $state_code;	public $zip;	public $country_code;	public $initials;	public $phone;	public $fax;	public $email;	public $emp_by_code;	public $medi_number;	public $rank_abb;	public $verification;		public $ref_key;	public $keyword_code;	  public function full_name() {    if(isset($this->author_key) && isset($this->last_name)) {      return $this->author_key . " " . $this->first_name. " " . $this->last_name. " " . 	  		$this->department. " " . $this->institution. " " . $this->city. " " . $this->country_code. " " . 			$this->email;    } else {      return "";    }  }      public function code_name() {    if(isset($this->last_name)){      return $this->last_name. " " . 	  		$this->initials. " " . $this->keyword_code. " " . $this->ref_key;    } else {      return "";    }  }   public function name_email() {    if(isset($this->last_name)){	return $this->last_name. " " . $this->email;	} else { return ""; }  }	public function add_definitions(){		}public static function legit_author($code) {	global $database;	$sql = "SELECT COUNT(*) FROM name_address WHERE author_key = '{$code}'";	$result_set = $database->query($sql);	if(array_shift($database->fetch_array($result_set)) == 1) return true;  else return false;//	if(mysql_num_rows($result_set) != 0) return true;  else return false;//	$rows = array_shift($database->fetch_array($result_set));//	if(!empty($rows)) 	return true;  else return false;	}		public static function get_by_authorkey($key){		$sql = "SELECT * FROM name_address WHERE author_key = '{$key}' ";		return self::find_by_sql($sql);	}		public static function get_next_code($lastname){		global $database;		if($lastname != "") {			$short = str_pad(substr($lastname,0,3),3,"  ", STR_PAD_RIGHT);						$eshort = $database->escape_value(str_pad(substr($lastname,0,3),3,"  ", STR_PAD_RIGHT));			$sql = "SELECT author_key FROM name_address WHERE author_key 					LIKE '{$eshort}%' ORDER BY author_key DESC LIMIT 1 ";			$result_set = $database->query($sql);			if($result_set != NULL) {				$last_code = array_shift($database->fetch_array($result_set));	 			$last_number = (int) substr($last_code, 3, 3);				$next_number = (string) $last_number+1;			}			else $next_number = 1;			$next_code = $short.str_pad($next_number, 3, "00", STR_PAD_LEFT);						return $next_code;		}		else return NULL;	}	public static function get_like_name($name){		$sql = "SELECT * FROM name_address WHERE last_name LIKE '{$name}%' ORDER BY last_name, first_name ";		return self::find_by_sql($sql);	}	 public static function parse_names($line){		$name_codes = array();		$code_line = "";		$names = explode(";",$line);		foreach($names as $name) 	{//			$nameparts = explode(", ",$name);			$nameparts = preg_split ("/[\s,]+/", $name);			$namematches = self::get_matches($nameparts[0],$nameparts[1]);			if (count($namematches) == 1) {//      $name_codes[] = static::instantiate($namematches[0]);				$name_codes[] = $namematches[0];//				array_push($name_codes, $namematches[0]);//				$code_line .= $namematches[0]->author_key." ";			}//			else array_push($name_codes, NULL);		}		return $name_codes;  	}		public static function get_matches($last, $first){		$last = addslashes($last);		$first = addslashes($first);		$sql = "SELECT author_key, last_name, first_name, initials email FROM name_address 				WHERE last_name = '{$last}' AND ( first_name = '{$first}' OR initials = '{$first}' ) ";				return self::find_by_sql($sql);	}	public static function names_sql_where($keycode, $keyname){						$sql = " AND ";		if($keycode !="") {$sql .=" AND author_key= '{$keycode}' "; }		if($keyname !="") {$sql .=" AND LOCATE('{$keyname}',last_name) ";}	return $sql;	}public static function email_sql_where($reg, $country, $rank, $lastname){						$sql = "SELECT CONCAT(n.initials,n.last_name) AS last_name, n.email FROM name_address n ";		if($reg !='') $sql .= " JOIN country_region c ON n.country_code=c.country_abb ";		$sql .= " WHERE n.email != '' ";		if($reg !="") {$sql .=" AND c.region_abb = '{$reg}' "; }		if($country !="") {$sql .=" AND n.country_code = '{$country}' "; }		if($rank !="") {$sql .=" AND LOCATE('{$rank}', n.rank_abb) ";}		if($lastname !="") {$sql .=" AND LOCATE('{$lastname}', n.last_name) ";}		$sql .= " ORDER BY n.country_code, n.last_name ";	return $sql;	}	public static function century_club_sql($country_code, $pub_level=100) {	$sql = "SELECT a.initials, a.last_name, b.pubcount ";	$sql .= "FROM name_address a ";	$sql .= "JOIN (SELECT author_key, COUNT(*) AS pubcount ";	$sql .= "FROM authors c JOIN refs d ON c.ref_key = d.ref_key";	$sql .= " GROUP BY author_key) b ON a.author_key = b.author_key ";	if($country_code != "") $sql .= " WHERE country_code = '{$country_code}' ";	$sql .= " AND b.pubcount >= '{$pub_level}' 			ORDER BY b.pubcount DESC ";	return $sql;	}		public static function country_pub_per_year($country_code, $beg_year, $end_year) {	$sql = "SELECT r.year, COUNT(DISTINCT a.ref_key), r.ref_key, n.country_code ";	$sql .= " FROM name_address n ";	$sql .= " JOIN authors a ON a.author_key = n.author_key ";	$sql .= " JOIN refs r ON r.ref_key = a.ref_key WHERE 1 ";	if($country_code != "") $sql .= " AND country_code = '{$country_code}' ";	if($beg_year != "") $sql .= " AND r.year >= '{$beg_year}' ";	if($end_year != "") $sql .= " AND r.year <= '{$end_year}' ";	$sql .= "GROUP BY r.year ORDER BY r.year ";	return $sql;	}public static function pub_country($beg_year, $end_year) {	$sql = "SELECT c.country, COUNT(DISTINCT a.ref_key), r.year, r.ref_key  ";	$sql .= " FROM name_address n ";	$sql .= " JOIN country_region c ON c.country_abb = n.country_code ";	$sql .= " JOIN authors a ON a.author_key = n.author_key ";	$sql .= " JOIN refs r ON r.ref_key = a.ref_key WHERE 1 ";	if($beg_year != "") $sql .= " AND r.year >= '{$beg_year}' ";	if($end_year != "") $sql .= " AND r.year <= '{$end_year}' ";	$sql .= "GROUP BY n.country_code ORDER BY COUNT(DISTINCT a.ref_key) DESC ";	return $sql;	}	public static function pub_institution($country, $beg_year, $end_year) {	$sql = "SELECT n.institution, COUNT(DISTINCT a.ref_key)  ";	$sql .= " FROM name_address n ";	$sql .= " JOIN authors a ON a.author_key = n.author_key ";	$sql .= " JOIN refs r ON r.ref_key = a.ref_key ";	$sql .= " WHERE n.country_code = '{$country}' ";	if($beg_year != "") $sql .= " AND r.year >= '{$beg_year}' ";	if($end_year != "") $sql .= " AND r.year <= '{$end_year}' ";	$sql .= " GROUP BY n.institution ORDER BY COUNT(DISTINCT a.ref_key) DESC ";	return $sql;	}public static function active_people($country, $beg_year, $end_year) {	$sql = "SELECT CONCAT(n.first_name,' ',n.last_name,' (',n.institution,')') AS fullname, COUNT(DISTINCT a.ref_key)  ";	$sql .= " FROM name_address n ";	$sql .= " JOIN authors a ON a.author_key = n.author_key ";	$sql .= " JOIN refs r ON r.ref_key = a.ref_key WHERE 1";	if($country != "") $sql .= " AND n.country_code = '{$country}' ";	if($beg_year != "") $sql .= " AND r.year >= '{$beg_year}' ";	if($end_year != "") $sql .= " AND r.year <= '{$end_year}' ";	$sql .= " GROUP BY fullname ORDER BY COUNT(DISTINCT a.ref_key) DESC ";	return $sql;	}public static function region_pub_per_year($region_code, $beg_year, $end_year) {	$sql = "SELECT r.year, COUNT(DISTINCT a.ref_key)  ";	$sql .= " FROM refs r ";	$sql .= " JOIN authors a ON a.ref_key = r.ref_key ";	$sql .= " JOIN name_address n ON a.author_key = n.author_key ";	$sql .= " JOIN country_region c ON c.country_abb = n.country_code ";	$sql .= " JOIN region_code g ON g.region_code = c.region_abb WHERE 1 ";	if($region_code != "") $sql .= " AND c.region_abb = '{$region_code}' ";	if($beg_year != "") $sql .= " AND r.year >= '{$beg_year}' ";	if($end_year != "") $sql .= " AND r.year <= '{$end_year}' ";	$sql .= " GROUP BY r.year ORDER BY r.year ";	return $sql;	}public static function personal_pub_list($author_key, $beg_year, $end_year) {	$sql = "SELECT CONCAT(n.first_name,' ',n.last_name,' (',n.institution,')') AS fullname, ";	$sql = " CONCAT(r.ref_key,' ',n.last_name,' (',n.institution,')') AS fullname, ";	$sql .= " FROM name_address n ";	$sql .= " JOIN authors a ON a.author_key = n.author_key ";	$sql .= " JOIN refs r ON r.ref_key = a.ref_key ";	$sql .= " JOIN journals j ON j.jornal_code = r.journal_code WHERE 1";	$sql .= " AND n.author_key = '{$author_key}' ";	if($beg_year != "") $sql .= " AND r.year >= '{$beg_year}' ";	if($end_year != "") $sql .= " AND r.year <= '{$end_year}' ";	$sql .= " ORDER BY r.year ";	return $sql;	}	public function compose_author_index($medi){		if(strlen($medi) == 2) $medi .= "%%";		$sql = "SELECT n.author_key, n.last_name, n.initials, d.ref_key, d.keyword_code FROM name_address n			JOIN (SELECT a.author_key, a.ref_key, kr.keyword_code FROM authors a			      JOIN (SELECT DISTINCT(CONCAT(k.ref_key,k.keyword_code)) AS rk, r.ref_key, k.keyword_code FROM refs r				    JOIN keywords k                                    ON r.ref_key = k.ref_key				    WHERE r.medi_number LIKE '{$medi}'                                    AND (k.keyword_code IN (SELECT isotope_code FROM isotope_code) OR k.keyword_code IN ('THY','IST','GEN','PSL'))) kr                               ON kr.ref_key = a.ref_key ) d                                   ON d.author_key = n.author_key                           ORDER BY n.last_name, n.initials, n.author_key, d.keyword_code, d.ref_key ";		return self::find_by_sql($sql);		}public function compose_hb_index($kwd1, $kwd2){	$sql = "SELECT n.author_key, n.last_name, n.initials, d.ref_key, d.keyword_code FROM name_address n ";	$sql .= "  JOIN (SELECT a.author_key, a.ref_key, kr.keyword_code FROM authors a ";	$sql .= "	JOIN (SELECT DISTINCT(CONCAT(ak.ref_key,ak.keyword_code)), ak.ref_key, ak.keyword_code FROM keywords ak ";	$sql .= "		JOIN (SELECT k1.ref_key, k1.keyword_code FROM keywords k1 ";	if($kwd2 != '' ) 	$sql .= "JOIN (SELECT * FROM keywords WHERE keyword_code = '{$kwd2}') k2 					  ON k1.ref_key=k2.ref_key AND k1.data_key=k2.data_key ";	$sql .= "		WHERE k1.keyword_code = '{$kwd1}') AS k				ON ak.ref_key = k.ref_key				WHERE (ak.keyword_code IN (SELECT isotope_code FROM isotope_code)				OR ak.keyword_code IN ('THY','IST','GEN','PSL'))) AS kr                        ON kr.ref_key = a.ref_key ) d    			                ON d.author_key = n.author_key                   ORDER BY n.last_name, n.initials, n.author_key, d.keyword_code, d.ref_key ";		return self::find_by_sql($sql);		}	public static function authenticate($author_key="") {    global $database;    $author_key = $database->escape_value($author_key);    $sql  = "SELECT * FROM name_address ";    $sql .= "WHERE author_key = '{$author_key}' ";    $sql .= "LIMIT 1";    $result_array = self::find_by_sql($sql);	return !empty($result_array) ? array_shift($result_array) : false;	}public static function name_code_err() {		global $database;		$sql  = "SELECT * FROM name_address WHERE SUBSTR(author_key,1,1) NOT BETWEEN 'A' AND 'Z' ";		$sql  .= " OR ((SUBSTR(author_key,2,1) NOT BETWEEN 'A' AND 'Z') AND (SUBSTR(author_key,2,1) NOT IN (' ','-'))) ";		$sql  .= " OR ((SUBSTR(author_key,3,1) NOT BETWEEN 'A' AND 'Z') AND (SUBSTR(author_key,3,1) NOT IN (' ','-'))) ";		$sql  .= "   OR SUBSTR(author_key,4,3) NOT BETWEEN '0' AND '999'   ";		$sql  .= "   OR (state_code NOT IN (SELECT state_code FROM state_code) AND state_code != '') ";		$sql  .= "   OR country_code NOT IN (SELECT country_code FROM country_region)   ORDER BY author_key";		$result_array = self::find_by_sql($sql);		return !empty($result_array) ? $result_array : false;		}public static function name_err() {		global $database;		$sql  = "SELECT * FROM name_address WHERE first_name = '' OR last_name = '' OR country_code = '' ";		$sql  .= " OR institution = '' ORDER BY author_key ";		$result_array = self::find_by_sql($sql);		return !empty($result_array) ? $result_array : false;		}}?>