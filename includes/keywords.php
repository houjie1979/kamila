<?php// If it's going to need the database, then it's // probably smart to require it before we start.require_once(LIB_PATH.DS.'database.php');class Keywords extends DatabaseObject {		protected static $table_name="keywords";	protected static $db_fields = array('id', 'ref_key', 'data_key', 					'keyword_code');		public $id;	public $ref_key;	public $data_key;	public $keyword_code;		public $subject;  public function full_name() {    if(isset($this->ref_key) && isset($this->keyword_code)) {      return $this->ref_key . " " . $this->data_key . " " . $this->keyword_code;    } else {      return "";    }  }     public function code_name() {    if(isset($this->ref_key) && isset($this->keyword_code)) {      return $this->ref_key . " " . $this->data_key . " " . $this->keyword_code;    } else {      return "";    }  }	public static function replace_keywords($refcode, $datcode, $keywordss){		$n = 0; $d = 0; $keywds = array(); $oldkeyid = array(); $keywords = array();		if($keywordss[0] !="") $keywords = array_unique($keywordss);		$sql = "SELECT * FROM keywords 				WHERE ref_key = '{$refcode}' AND data_key = '{$datcode}' ";		$oldkeywordrecs = self::find_by_sql($sql);		foreach($oldkeywordrecs as $rec) {			$oldkeyid["$rec->keyword_code"] = $rec->id;			if( ! in_array($rec->keyword_code, $keywords )) {				$rec->delete(); $d++; }		}		if($keywords[0] != "") {			foreach($keywords as $key) {				$newrec['ref_key'] = $refcode;				$newrec['data_key'] = $datcode;				$newrec['keyword_code'] = $key;				if(array_key_exists($key, $oldkeyid)) $newrec['id'] = $oldkeyid["$key"];					$newkeyword = Keywords::instantiateit($newrec);				if($newkeyword->is_keyword($key)){					$newkeyword->save(); $n++;				}			}		}			$keywds["{$d}"] = $n;		return $keywds;	}	  public function compose_hb_subject($kwd1,$kwd2){ 	$sql = "SELECT p.subject_title, x.ref_key, x.keyword_code, r.year FROM keyword_code p ";	$sql .=	"JOIN (SELECT DISTINCT(CONCAT(ak.ref_key,ak.keyword_code)), ak.ref_key, ak.keyword_code FROM keywords ak ";   	$sql .=	"        JOIN (SELECT k1.ref_key, k1.keyword_code FROM keywords k1 ";	if($kwd2 !=''){ $sql .=	" JOIN (SELECT * FROM keywords WHERE keyword_code = '{$kwd2}') k2 ";			$sql .=	" ON k1.ref_key=k2.ref_key AND k1.data_key=k2.data_key "; }	$sql .=	"  WHERE k1.keyword_code = '{$kwd1}') AS xk ";	$sql .=	"  ON ak.ref_key = xk.ref_key ) AS x ";	$sql .=	" ON x.keyword_code = p.keyword_code ";	$sql .=	" JOIN refs r ON x.ref_key = r.ref_key ";	$sql .=	" WHERE p.subject_flag = 'Y' ORDER BY p.subject_title, r.year, x.ref_key";	return self::find_by_sql($sql);   }      public function compose_issue_subject($medi){		if(strlen($medi) == 2) $medi .= '%%'; 		$sql = "SELECT p.subject_title, x.ref_key, x.keyword_code FROM `keyword_code` p				JOIN (SELECT DISTINCT y.z, y.keyword_code, y.ref_key FROM    						(SELECT CONCAT(a.ref_key,a.keyword_code) AS z, a.ref_key, a.keyword_code 							FROM keywords a						JOIN (SELECT ref_key FROM datas WHERE medi_number LIKE '{$medi}') b  						ON a.ref_key = b.ref_key 						ORDER BY a.keyword_code, b.ref_key ) y ) x				ON x.keyword_code = p.keyword_code				WHERE p.subject_flag = 'Y' 				ORDER BY p.subject_title, x.ref_key";			return self::find_by_sql($sql);   }    public function add_definitions(){		global $database;		$sql = "SELECT subject_title FROM keyword_code WHERE keyword_code = '".$this->keyword_code. "' LIMIT 1";    	$result_set = $database->query($sql);		$row = $database->fetch_array($result_set);		$this->subject = $row['subject_title'];		}	public static function keys_sql_where($refkey, $datakey){						$sql = "";		if($refkey !="") {$sql .=" AND ref_key= '{$refkey}' "; }		if($keycode !="") {$sql .=" AND data_key = '{$datakey}' ";}		$sql .= " ORDER BY ref_key, data_key, keyword_code ";	return $sql;	}	public static function is_keyword($key) {	  global $database;	$sql = "SELECT COUNT(*) FROM keywords WHERE keyword_code = '{$key}'";	$result_set = $database->query($sql);	$row = $database->fetch_array($result_set);//	echo $key." ".array_shift($row);	return array_shift($row);	}	public static function get_by_refkey($refkey, $datakey){	$sql = "SELECT * FROM keywords WHERE ref_key = '{$refkey}' AND data_key = '{$datakey}' ";	return self::find_by_sql($sql); 		}	public static function authenticate($ref_key="", $data_key="") {    global $database;    $ref_key = $database->escape_value($ref_key);    $data_key = $database->escape_value($data_key);    $sql  = "SELECT * FROM keywords ";    $sql .= "WHERE ref_key = '{$ref_key}' AND data_key = '{$data_key}' ";    $sql .= "LIMIT 1";    $result_array = self::find_by_sql($sql);		return !empty($result_array) ? array_shift($result_array) : false;	}	public static function keyword_err() {		global $database;		$sql  = "SELECT * FROM `keywords` WHERE ref_key NOT IN (SELECT ref_key FROM refs) ";		$sql .= " OR keyword_code NOT IN (SELECT keyword_code FROM keyword_code ";		$sql .= " UNION SELECT isotope_code FROM isotope_code)  ORDER BY ref_key, data_key, keyword_code";		$result_array = self::find_by_sql($sql);		return !empty($result_array) ? $result_array : false;	}		}?>